---
apiVersion: v1
kind: Namespace
metadata:
  name: ckad00015
---
apiVersion: v1
kind: Namespace
metadata:
  name: frontend
---
apiVersion: v1
kind: Namespace
metadata:
  name: pod-resources
---
apiVersion: v1
kind: Namespace
metadata:
  name: ckad00014
---
apiVersion: v1
kind: Namespace
metadata:
  name: quetzal
---
apiVersion: v1
kind: Namespace
metadata:
  name: gorilla
---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-ckad
---
apiVersion: v1
kind: Namespace
metadata:
  name: haddock
---
apiVersion: v1
kind: Namespace
metadata:
  name: garfish
---
apiVersion: v1
kind: Namespace
metadata:
  name: goshawk
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gorilla-sa
  namespace: gorilla
---
apiVersion: v1
kind: Pod
metadata:
  name: probe-demo
spec:
  containers:
  - name: app
    image: nginx:1.16
    livenessProbe:
      httpGet:
        path: /
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 5
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: default
data:
  default.conf: |
    server {
        listen       80;
        server_name  localhost;

        location / {
            root   /usr/share/nginx/html;
            try_files $uri $uri/index.html /index.html;
        }

        location /healthz/return200 {
            add_header Content-Type text/plain;
            return 200 'OK';
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: probe-http
  name: probe-http
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: probe-http
  strategy: {}
  template:
    metadata:
      labels:
        app: probe-http
    spec:
      volumes:
        - name: config
          configMap:
            name: nginx-conf 
      containers:
      - image: nginx:1.16
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        volumeMounts:
            - name: config
              mountPath: /etc/nginx/conf.d/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webapp
  name: webapp
  namespace: ckad00015
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  strategy: {}
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app
  namespace: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: frontend-deployment
  name: frontend-deployment
  namespace: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-deployment
  template:
    metadata:
      labels:
        app: frontend-deployment
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
---
apiVersion: v1
kind: Namespace
metadata:
  name: ckad00017
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf-ckad00017
  namespace: ckad00017
data:
  default.conf: |
    server {
        listen       81;
        server_name  localhost;

        location / {
            root   /usr/share/nginx/html;
            try_files $uri $uri/index.html /index.html;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ckad00017-deployment
  name: ckad00017-deployment
  namespace: ckad00017
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ckad00017-deployment
  template:
    metadata:
      labels:
        app: ckad00017-deployment
    spec:
      volumes:
        - name: config
          configMap:
            name: nginx-conf-ckad00017
      containers:
      - image: nginx:1.16
        name: nginx
        ports:
        - containerPort: 81
          name: http
          protocol: TCP
        volumeMounts:
            - name: config
              mountPath: /etc/nginx/conf.d/
---
apiVersion: v1
kind: Namespace
metadata:
  name: ckad00018
---
apiVersion: v1
kind: Pod
metadata:
  name: ckad00018-dmz  
  namespace: ckad00018
  labels:
    app: ckad00018-dmz
    item: CKAD00018
spec:
  containers:
  - name: app
    image: nginx:1.16
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: ckad00018-newpod
  labels:
    app: ckad00018-newpod
    item: CKAD00018
  namespace: ckad00018
spec:
  containers:
  - name: app
    image: nginx:1.16
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    app: db
    item: CKAD00018
  namespace: ckad00018
spec:
  containers:
  - name: app
    image: nginx:1.16
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: front
  labels:
    app: front
    item: CKAD00018
  namespace: ckad00018
spec:
  containers:
  - name: app
    image: nginx:1.16
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ckad00018-policy-demo
  namespace: ckad00018
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: access-front
  namespace: ckad00018
spec:
  podSelector:
    matchLabels:
      app: front
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          front-access: "true"
  egress:
  - to:
    - podSelector:
        matchLabels:
          front-access: "true"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: access-db
  namespace: ckad00018
spec:
  podSelector:
    matchLabels:
      app: db
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          db-access: "true"
  egress:
  - to:
    - podSelector:
        matchLabels:
          db-access: "true"
---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-kk
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginxdep
  name: nginxdep
  namespace: ingress-kk
spec:
  replicas: 2
  selector:
    matchLabels:
      name: nginxdep
  template:
    metadata:
      labels:
        name: nginxdep
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ngx-ingress
  namespace: ingress-kk
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
   - http:
       paths:
       - pathType: Prefix
         path: "/world"
         backend:
           service:
             name: nginxsvc-kk
             port:
               number: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: poller
  namespace: default
spec:
  containers:
  - name: app
    image: nginx:1.16
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: nginxsvc
  namespace: default
spec:
  ports:
  - name: http
    port: 90
    targetPort: 80
  selector:
    name: poller
---
#deploy-nk8s
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-nk8s
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      name: deploy-nk8s
  template:
    metadata:
      labels:
        name: deploy-nk8s
    spec:
      containers:
      - image: ninx
        name: nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: honeybee-deployment
  name: honeybee-deployment
  namespace: gorilla
spec:
  replicas: 1
  selector:
    matchLabels:
      app: honeybee-deployment
  template:
    metadata:
      labels:
        app: honeybee-deployment
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: ingress-ckad
data:
  default.conf: |
    server {
        listen       81;
        server_name  localhost;

        location / {
            root   /usr/share/nginx/html;
            try_files $uri $uri/index.html /index.html;
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-dm
  name: nginx-dm
  namespace: ingress-ckad
spec:
  replicas: 2
  selector:
    matchLabels:
      name: nginx-ing
  template:
    metadata:
      labels:
        name: nginx-ing
    spec:
      volumes:
        - name: config
          configMap:
            name: nginx-conf
      containers:
      - image: nginx:1.16
        name: nginx
        ports:
        - containerPort: 81
          name: http
          protocol: TCP
        volumeMounts:
            - name: config
              mountPath: /etc/nginx/conf.d/
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-ing-svc
  namespace: ingress-ckad
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    name: nginx-dm
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress-test
  namespace: ingress-ckad
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
   - http:
       paths:
       - pathType: Prefix
         path: "/hello"
         backend:
           service:
             name: nginx-ing
             port:
               number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nosql
  name: nosql
  namespace: haddock
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nosql
  strategy: {}
  template:
    metadata:
      labels:
        app: nosql
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
        resources: 
          requests:
            memory: "40Mi"
            cpu: "5000M"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: ckad00014
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - image: nginx:1.16
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP